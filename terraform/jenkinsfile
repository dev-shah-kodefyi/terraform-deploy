node {
 try  {
 notify('Job Started') 

     
  stage('Git-Checkout') {
   git 'https://github.com/devops311/terraform-deploy.git'
  }
    
 def project_path="terraform"
 
 dir(project_path) {
 stage('Creating a folder to store artifacts'){
    sh label: '',script: "mkdir -p warstorageprod"
    
    }
    
 stage(' Downloading Jar From Artifactory Locally'){
    def server= Artifactory.server 'Artifactory'
    def downloadSpec = """{
    "files": [
    {
      "pattern": "userproject/*.war",
      "target": "/root/.jenkins/workspace/production-deployment/terraform/warstorageprod/"
      
    }
    ]
    }"""
    server.download(downloadSpec)
   
}
    
 
  stage('Geting Ready For Ansible') {
  sh label: 'Docker', script: 'cp -rf warstorageprod/*.war /root/.jenkins/workspace/production-deployment/terraform/ansible-file/ansible/04-Tomcat/templates'
 }  
   
 }

def project_terra="/root/.jenkins/workspace/production-deployment/terraform/ansible-file"
dir(project_terra) {
   stage('Prod Deployment on AWS'){
   sh label: 'terraform', script: '/bin/terraform  init'
   sh label: 'terraform', script: '/bin/terraform  apply -input=false -auto-approve'
   }
}

notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}



def notify(status){
    emailext (
	to: "abc",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}
